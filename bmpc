#!/usr/bin/env bash
# name: 		bmpc
# author : 	KittyKatt
# description:	BASH MPD Client

# Constants
c1="\e[1;33m" # Bold Yellow
c2="\e[1;36m" # Bold Blue
c3="\e[1;37m" # Bold White
c4="\e[1;32m" # Bold Green
c5="\e[1;31m" # Bold Red
bold="\e[1m"
underline="\e[4m"
c0="\e[0m"

version="1.5.0"

# Common Functions

function mpd_sndcommand() {
        # $1 command
        exec 5<> $MPD_TCP 2>/dev/null
        [[ $? -gt 0 ]] && return 1
	if [ "$MPD_PASS" ]; then echo "password $MPD_PASS" >&5; fi
        echo $1 >&5
        echo "close" >&5
        tmp=$(cat <&5)
        exec 5>&-
        _ret=$(head -n -1 <<< "$tmp" | tail -n +2)
        return 0
}

function extract_field() {
        # $1 field_name
        # $2 search body
        _ret=$(grep "^$1: " <<< "$2" 2>/dev/null | sed "s/$1: //")
}

function gettime() {
	input="$@"
	secs=$((${input}%60))
	mins=$((${input}/60%60))
	hours=$((${input}/3600%24))
	days=$((${input}/86400))
	output="${secs}s"
	if [ "${mins}" -ne "0" ]; then
		output="${mins}m ${output}"
	fi
	if [ "${hours}" -ne "0" ]; then
		output="${hours}h ${output}"
	fi
	if [ "${days}" -ne "0" ]; then
		output="${days}d ${output}"
	fi
	echo "${output}"
}

function mpd_getinfo() {
	if [[ `pgrep mpd` ]]; then
		mpd_sndcommand currentsong
		[[ $? -gt 0 ]] && return 1
		_tmp=$_ret
		mpdTitle=$(grep "^Title: " <<< "$_tmp" 2>/dev/null | sed "s/Title: //")
		mpdArtist=$(grep "^Artist: " <<< "$_tmp" 2>/dev/null | sed "s/Artist: //")
		mpdAlbum=$(grep "^Album: " <<< "$_tmp" 2>/dev/null | sed "s/Album: //")
		_songtime=$(grep "^Time: " <<< "$_tmp" 2>/dev/null | sed "s/Time: //" | cut -f 1 -d :)
		(( _mm=$_songtime / 60 ))
		[[ ${#_mm} -eq 1 ]] && _mm="0$_mm"
		(( _ss=$_songtime - $_mm * 60 ))
		[[ ${#_ss} -eq 1 ]] && _ss="0$_ss"
		mpdLength="$_mm:$_ss"
		mpdDate=$(grep "^Date: " <<< "$_tmp" 2>/dev/null | sed "s/Date: //")
		mpdGenre=$(grep "^Genre: " <<< "$_tmp" 2>/dev/null | sed "s/Genre: //")
		mpd_sndcommand "status"
		_tmp=$_ret
		mpdSongID=$(grep "^song: " <<< "$_tmp" 2>/dev/null | sed "s/song: //")
		mpdPlaylistL=$(grep "^playlistlength: " <<< "$_tmp" 2>/dev/null | sed "s/playlistlength: //")
		_nowtime=$(grep "^time: " <<< "$_tmp" 2>/dev/null | sed "s/time: //" | awk -F":" '{print $1}')
		(( _mm=$_nowtime / 60 ))
		[[ ${#_mm} -eq 1 ]] && _mm="0$_mm"
		(( _ss=$_nowtime - $_mm * 60 ))
		[[ ${#_ss} -eq 1 ]] && _ss="0$_ss"
		mpdNowTime="$_mm:$_ss"
		mpdBitrate=$(grep "^bitrate: " <<< "$_tmp" 2>/dev/null | sed "s/bitrate: //")
	else
	        echo -e "\e[1;31mERROR! \e[0m\e[1mNo currently playing song. (MPD stopped?)\e[0m"
		exit
	fi
}

function displayHelp() {
	echo -e "${c1}bmpc${c0} : The BASH MPD Client\e[0m"
	echo -e "\t${c2}help${c0}\t\t Display this help message."
        echo -e "\t${c2}next${c0}\t\t Jump to next song on playlist."
        echo -e "\t${c2}prev${c0}\t\t Jump to previous song on playlist."
        echo -e "\t${c2}pause${c0}\t\t Pause current playback."
        echo -e "\t${c2}stop${c0}\t\t Stop current playback."
        echo -e "\t${c2}play${c0}\t\t Resume playback from stop or pause."
        echo -e "\t${c2}toggle${c0}\t\t Toggles between play|pause/stop. Useful for keybindings."
        echo -e "\t${c2}current${c0}\t\t Shows information on currently laying song. Optional --format."
        echo -e "\t${c2}playlist${c0}\t Shows current playlist in simple format."
        echo -e "\t${c2}status${c0}\t\t Shows current status of MPD server."
        echo -e "\t${c2}stats${c0}\t\t Shows statistics about MPD database."
        echo -e "\t${c2}rm SONGID${c0}\t Removes song with SONGID from playlist."
        echo -e "\t${c2}rm current${c0}\t Removes currently playing song from playlist."
        echo -e "\t${c2}raw${c0}\t\t Returns output of raw TCP commands to the MPD server."
        echo -e "\t${c2}set${c0}\t\t Displays various server settings."
        echo -e "\t${c2}set random${c0}\t Toggles random playback."
        echo -e "\t${c2}set repeat${c0}\t Toggles repeat playback."
	echo -ne "\n"
	echo -e "\t${c2}-h|--help${c0}\t Display this help message."
	echo -e "\t${c2}--version${c0}\t Displays version and script information."
	echo -e "\t${c2}--host HOST${c0}\t Specify MPD_HOST."
	echo -e "\t${c2}--nocolor${c0}\t Specify bmpc to use no colors."
	echo -e "\t${c2}--format${c0}\t Used to 'current' to control output."
}

# Code
while [[ $# -gt 1 ]]; do
	case "$1" in
		'--host')
			if [ ! "$3" ]; then
				echo -e "  ${c5} ERROR!${c0}  You did not supply a host and/or a command."
				exit 1
			else
				MPD_HOST="$2"
				shift 2
			fi
		;;
		'--port')
			if [ ! "$3" ]; then
				echo -e "  ${c5} ERROR!${c0}  You did not supply a port and/or a command."
				exit 1
			else
				MPD_PORT="$2"
				shift 2
			fi
		;;
		'--pass')
			if [ ! "$3" ]; then
				echo -e "  ${c5} ERROR!${c0}  You did not supply a pass and/or a command."
				exit 1
			else
				MPD_PASS="$2"
				shift 2
			fi
		;;
		'--nocolor')
			c0=''
			c1=''
			c2=''
			c3=''
			c4=''
			c5=''
			bold=''
			underline=''
			shift
		;;
		*)
			break 1
		;;
	esac
done

# MPD server settings

if [ -z "$MPD_HOST" ]; then HOST="localhost"; else HOST="$MPD_HOST"; fi
if [ -z "$MPD_PORT" ]; then PORT="6600"; else PORT="$MPD_PORT"; fi
MPD_TCP="/dev/tcp/$HOST/$PORT"

case "$1" in
	'help'|'-h'|'--help')
		displayHelp
		exit 0
	;;
	'--version')
		printf "${c2}bMPC${c0} - ${c1}The BASH MPD Client${c0}\n"
		printf "The current version of bMPC is ${version}.\n"
		printf "This script was created and is maintained by KittyKatt (Brett Bohnenkamper).\n"
		printf "Source can be found at https://github.com/KittyKatt/bmpc\n"
		exit 0
	;;
	'add')
		_uri="${2}"
		tmpv=$((${#_uri}-1))
		if [[ "${_uri:${tmpv}:1}" == "/" ]]; then _uri="${_uri:0:${tmpv}}"; fi
		mpd_sndcommand "add \"${_uri}\""
		printf "${c1}>>>${c0} Successfully added song to current playlist.\n"
	;;
	'current')
		mpd_getinfo
		shift
		if [[ "${1}" == "--format" ]]; then
			shift
			format="${@}"
			output=$(echo "${format}" | \
				sed "s/%artist%/$(echo ${mpdArtist:-N/A} | sed -e 's/[\/&]/\\&/g')/g" | \
				sed "s/%track%/$(echo ${mpdTitle:-N/A} | sed -e 's/[\/&]/\\&/g')/g" | \
				sed "s/%album%/$(echo ${mpdAlbum:-N/A} | sed -e 's/[\/&]/\\&/g')/g" | \
				sed "s/%songid%/$(echo ${mpdSongID:-N/A} | sed -e 's/[\/&]/\\&/g')/g" | \
				sed "s/%genre%/$(echo ${mpdGenre:-N/A} | sed -e 's/[\/&]/\\&/g')/g" | \
				sed "s/%date%/$(echo ${mpdDate:-N/A} | sed -e 's/[\/&]/\\&/g')/g" | \
				sed "s/%length%/$(echo ${mpdLength:-N/A} | sed -e 's/[\/&]/\\&/g')/g" | \
				sed "s/%currenttime%/$(echo ${mpdNowTime:-N/A} | sed -e 's/[\/&]/\\&/g')/g" | \
				sed "s/%bitrate%/$(echo ${mpdBitrate:-N/A} | sed -e 's/[\/&]/\\&/g')/g")
			echo "${output}"
		else
			echo -e " ${c1}NP:  ${c2}(${c0} ${mpdSongID:-N/A} ${bold}/${c0} ${mpdPlaylistL:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdTitle:-N/A} ${bold}-${c0} ${mpdArtist:-N/A} ${bold}-${c0} ${mpdAlbum:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdGenre:-N/A}${bold} -${c0} ${mpdDate:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdNowTime:-N/A} / ${mpdLength:-N/A}${bold} at${c0} ${mpdBitrate:-N/A} kbps ${c2})${c0}"
		fi
	;;
	'ls')
		_uri="${2}"
		tmpv=$((${#_uri}-1))
		if [[ "${_uri:${tmpv}:1}" == "/" ]]; then _uri="${_uri:0:${tmpv}}"; fi
		mpd_sndcommand "lsinfo \"${_uri}\""
		OLDIFS=${IFS}
		IFS=$'\n'
		_dirs=( $(grep "directory: " <<< "${_ret}") )
		_files=( $(grep "file: " <<< "${_ret}") )
		_playlists=( $(grep "playlist: " <<< "${_ret}") )
		for d in "${_dirs[@]}"; do
			printf "${c2}${d/directory: /}${c0}\n"
		done
		for f in "${_files[@]}"; do
			printf "${c1}${f/file: /}${c0}\n"
		done
		for p in "${_playlists[@]}"; do
			printf "${c4}${p/playlist: /}${c0}\n"
		done
		IFS=${OLDIFS}
	;;
	'next')
		mpd_sndcommand next
		mpd_getinfo
		echo -e " ${c4}>>>  ${c2}(${c0} ${mpdSongID:-N/A} ${bold}/${c0} ${mpdPlaylistL:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdTitle:-N/A} ${bold}-${c0} ${mpdArtist:-N/A} ${bold}-${c0} ${mpdAlbum:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdLength:-N/A} ${c2})${c0}"
	;;
	'pause')
		mpd_sndcommand status
		mpd_status=$(echo "$_ret" | grep '^state:' 2>/dev/null  | sed 's/state: //')
		if [ "$mpd_status" = "play" ]; then
			mpd_sndcommand 'pause 1'
		else
			echo -e " ${c5}ERROR!${c0}\t Playback is already paused or stopped."
		fi
	;;
	'play')
		mpd_sndcommand status
		mpd_currentid=$(echo "$_ret" | grep '^song:' 2>/dev/null  | sed 's/song: //')
		mpd_status=$(echo "$_ret" | grep '^state:' 2>/dev/null  | sed 's/state: //')
		if [ "$mpd_status" = "pause" ]; then
			mpd_sndcommand 'pause 0'
		elif [ "$mpd_status" = "stop" ]; then
			mpd_sndcommand "play $mpd_currentid"
		else
			echo -e " ${c5}ERROR!${c0}\t Playback is already playing."
		fi
	;;
	'playlist')
		mpd_sndcommand playlistinfo
		# echo "$_ret" | awk -F': ' '$1 ~ /file/ && NR != 1 { print arr["Pos"] " - " arr["Title"] " - " arr["Artist"] " - " arr["Album"]; } {arr[$1] = $2}'
		playlistinfo=$(echo "${_ret}" | grep -E '(^Title:|^Artist:)')
		playlistinfo=$(echo "${playlistinfo}" | awk '{
			gsub(/Artist: /, "")
			gsub(/Title: /, ";")
			if (NR % 2)
			printf("%s", $0)
			else
			printf("%s\n", $0)
		}')
		OLDIFS=${IFS}
		IFS=$'\n'
		for i in "${playlistinfo}"; do
			awk -F';' '{print $1 " - " $2}' <<< "${i}"
		done
		IFS=${OLDIFS}
	;;
	'prev')
		mpd_sndcommand previous
		mpd_getinfo
		echo -e " ${c5}<<<  ${c2}(${c0} ${mpdSongID:-N/A} ${bold}/${c0} ${mpdPlaylistL:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdTitle:-N/A} ${bold}-${c0} ${mpdArtist:-N/A} ${bold}-${c0} ${mpdAlbum:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdLength:-N/A} ${c2})${c0}"
	;;
	'raw')
		while [ -n "$2" ]; do
			_opts="$_opts $2"
			shift
			if [ $? -ne 0 ]; then
				break
			fi
		done
		# echo $_opts
		mpd_sndcommand "$_opts"
		echo "$_ret"
	;;
	'rm')
		_songid="${2}"
		if [ ! "${_songid}" ]; then printf " ${c5}>>>${c0} You must supply 'rm' with a songid or current.\n"
		else
			if [ "${_songid}" == "current" ]; then
				mpd_getinfo
				mpd_sndcommand next
				mpd_sndcommand "deleteid ${mpdSongID}"
			elif [ $(grep "^[0-9]*$" 2>/dev/null <<< "${_songid}") ]; then
				mpd_sndcommand "deleteid ${2}"
			else
				printf " ${c5}>>>${c0} You must supply 'rm' with a songid or current.\n"
			fi
		fi
	;;
	'search')
		_tag="${2}"
		_query="${3}"
		mpd_sndcommand "search "${_tag}" "${_query}""
		OLDIFS=${IFS}
		IFS=$'\n'
		_result=( $(grep -E '^file: ' <<< "${_ret}" ) )
		if [[ -n "${_result}" ]]; then
			printf "${c1}>>>${c2} Search Results: ${c0}\n"
			n=1
			for r in "${_result[@]}"; do
				printf "${c2}${n} ${c0}${r/file: /}\n"
				$((n++))
			done
		else
			printf "${c5}>>>${c0} Search results came back empty. Try a different search TAG or QUERY.\n"
			exit 1
		fi
		IFS=${OLDIFS}
	;;
	'set')
		case "$2" in
			'random')
				mpd_sndcommand status random
				mpd_randomstate=$(echo "$_ret" | grep "random:" 2>/dev/null | sed 's/random: //')
				if [ "$mpd_randomstate" == "0" ]; then
					mpd_sndcommand 'random 1'
					echo -e " ${c2}>>${c1} Settings${c0}\tRandom status now set to${c2} on${c0}."
				elif [ "$mpd_randomstate" == "1" ]; then
					mpd_sndcommand 'random 0'
					echo -e " ${c2}>>${c1} Settings${c0}\tRandom status now set to${c2} off${c0}."
				fi
			;;
			'repeat')
				mpd_sndcommand status repeat
				mpd_repeatstate=$(echo "$_ret" | grep "repeat:" 2>/dev/null | sed 's/repeat: //')
				if [ "$mpd_repeatstate" == "0" ]; then
					mpd_sndcommand 'repeat 1'
					echo -e " ${c2}>>${c1} Settings${c0}\tRepeat status now set to${c2} on${c0}."
				elif [ "$mpd_repeatstate" == "1" ]; then
					mpd_sndcommand 'repeat 0'
					echo -e " ${c2}>>${c1} Settings${c0}\tRepeat status now set to${c2} off${c0}."
				fi
			;;
		esac
		if [ -z "$2" ]; then
			mpd_sndcommand status
			mpd_randomstate=$(echo "$_ret" | grep "random:" 2>/dev/null | sed -e 's/random: //' -e 's/0/off/' -e 's/1/on/')
			mpd_repeatstate=$(echo "$_ret" | grep "repeat:" 2>/dev/null | sed -e 's/repeat: //' -e 's/0/off/' -e 's/1/on/')
			mpd_xfadestate=$(echo "$_ret" | grep "xfade:" 2>/dev/null | sed -e 's/xfade: //' -e 's/0/off/' -e 's/1/on/')
			echo -e " ${c2}>>${c1} Settings${c0}\t${c2}Random:${c0} ${mpd_randomstate} ${bold}-${c0} ${c2}Repeat:${c0} ${mpd_repeatstate} ${bold}-${c0} ${c2}Crossfade:${c0} ${mpd_xfadestate}${c0}"
		fi
	;;
	'stats')
		mpd_sndcommand stats
		uptime=$(awk '/^uptime: /{gsub(/uptime: /, ""); print}' <<< "${_ret}")
		uptime=$(gettime "${uptime}")
		playtime=$(awk '/^db_playtime: /{gsub(/db_playtime: /, ""); print}' <<< "${_ret}")
		playtime=$(gettime "${playtime}")
		db_artists=$(awk '/^artists: /{gsub(/artists: /, ""); print}' <<< "${_ret}")
		db_songs=$(awk '/^songs: /{gsub(/songs: /, ""); print}' <<< "${_ret}")
		db_albums=$(awk '/^albums: /{gsub(/albums: /, ""); print}' <<< "${_ret}")
		last_update=$(awk '/^db_update: /{gsub(/db_update: /, ""); print}' <<< "${_ret}")
		last_update=$(date -d @${last_update})
		printf "${c2}Uptime:${c0}\t\t${uptime}\n"
		printf "${c2}Playtime:${c0}\t${playtime}\n"
		printf "${c2}Songs in DB:${c0}\t${db_songs}\n"
		printf "${c2}Artists in DB:${c0}\t${db_artists}\n"
		printf "${c2}Albums in DB:${c0}\t${db_albums}\n"
		printf "${c2}Last DB Update:${c0}\t${last_update}\n"
	;;
	'status')
		mpd_sndcommand 'status'
		mpd_state=$(awk  '/^state: /' <<< "${_ret}")
		mpd_state=${mpd_state/state: }
		case ${mpd_state} in
			'play') mpd_state="Playing" ;;
			'pause') mpd_state="Paused" ;;
			'stop') mpd_state="Stopped" ;;
		esac
		mpd_plength=$(awk '/^playlistlength: /' <<< "${_ret}")
		mpd_plength=${mpd_plength/playlistlength: }
		mpd_vol=$(awk '/^volume: /' <<< "${_ret}")
		mpd_vol=${mpd_vol/volume: }
		mpd_cursongid=$(awk '/^songid: /' <<< "${_ret}")
		mpd_cursongid=${mpd_cursongid/songid: }
		mpd_nextsongid=$(awk '/^nextsongid: /' <<< "${_ret}")
		mpd_nextsongid=${mpd_nextsongid/nextsongid: } 
		mpd_cursong=$(bmpc raw "playlistid ${mpd_cursongid}" | awk '/Title: /' | sed 's/Title: //')
		mpd_nextsong=$(bmpc raw "playlistid ${mpd_nextsongid}" | awk '/Title: /' | sed 's/Title: //')
		mpd_rand=$(awk '/^random: /' <<< "${_ret}")
		mpd_rand=${mpd_rand/random: }
		if [ "${mpd_rand}" == "1" ]; then mpd_rand="On"; else mpd_rand="Off"; fi
		mpd_rep=$(awk '/^repeat: /' <<< "${_ret}")
		mpd_rep=${mpd_rep/repeat: }
		if [ "${mpd_rep}" == "1" ]; then mpd_rep="On"; else mpd_rep="Off"; fi
		printf " ${c2}>>${c1} Current Status:${c0}\t${c2}${mpd_state}${c0}\n"
		printf "    ${c2}Current Volume:\t${c0}${mpd_vol}%%\n"
		printf "    ${c2}Current Song:\t${c0}${mpd_cursong}\n"
		printf "    ${c2}Next Song:\t\t${c0}${mpd_nextsong}\n"
		printf "    ${c2}Random:\t\t${c0}${mpd_rand}\n"
		printf "    ${c2}Repeat:\t\t${c0}${mpd_rep}\n"
	;;
	'stop')
		mpd_sndcommand stop
	;;
	'toggle')
		mpd_sndcommand status
		mpd_status=$(echo "$_ret" | grep '^state:' 2>/dev/null  | sed 's/state: //')
		if [ "$mpd_status" = "pause" ]; then
			mpd_sndcommand 'pause 0'
		elif [ "$mpd_status" = "play" ]; then
			mpd_sndcommand 'pause 1'
		fi
	;;
	'update')
		mpd_sndcommand update
		update_num=$(awk -F':' '/^updating_db/ {print $2}' <<< "${_ret}")
		update_num=${update_num/ /}
		printf "${c1}>>>${c0} Database update started (Update #${update_num} since the server was started).\n"
	;;
	'vol')
		if [ -z "$2" ]; then
			mpd_sndcommand status
			mpd_volume=$(awk '/^volume:/{ print $2 };' <<< "${_ret}")
			echo "$mpd_volume"
			echo -e " ${c2}>>${c1} Volume:  ${c2}${mpd_volume}%${c0}"
		else
			intchar=$(echo "$2" | cut -c1)
			if [[ "${intchar}" == "+" ]]; then
				vol_plus=$(echo "$2" | sed 's/^+//')
				mpd_sndcommand status
				mpd_volume=$(awk '/^volume:/{ print $2 };' <<< "${_ret}")
				mpd_newvol=$(( ${mpd_volume} + ${vol_plus} ))
				[[ "${mpd_newvol}" -ge "101" ]] && mpd_newvol="100"
				mpd_sndcommand "setvol ${mpd_newvol}"
				echo -e " ${c2}>>${c1} Volume set to:  ${c2}${mpd_newvol}%${c0}"
			elif [[ "${intchar}" == "-" ]]; then
				vol_plus=$(echo "$2" | sed 's/^-//')
				mpd_sndcommand status
				mpd_volume=$(awk '/^volume:/{ print $2 };' <<< "${_ret}")
				mpd_newvol=$(( ${mpd_volume} - ${vol_plus} ))
				[[ "${mpd_newvol}" -le "0" ]] && mpd_newvol="0"
				mpd_sndcommand "setvol ${mpd_newvol}"
				echo -e " ${c2}>>${c1} Volume set to:  ${c2}${mpd_newvol}%${c0}"
			else
				mpd_newvol="${2}"
				mpd_sndcommand "setvol ${mpd_newvol}"
				echo -e " ${c2}>>${c1} Volume set to:  ${c2}${mpd_newvol}%${c0}"
			fi
		fi
	;;
	'wait')
		while :; do
			mpd_sndcommand "idle player"
			if [ -n "${_ret}" ]; then
				echo "${_ret}"
			fi
		done
	;;
	"")
		echo -e " ${c5}ERROR!${c0}\t You must supply a command! Please see --help, -h, or help for a list of commands."
		exit 1
	;;
	*)
		echo -e " ${c5}ERROR!${c0}\tThat is not a valid command. Please see bmpc --help or bmpc help for"
		echo -e "\ta list of available commands."
		exit 1
	;;
esac

exit 0
