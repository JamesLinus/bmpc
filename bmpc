#!/bin/bash

# BASH MPD Client

# Constants
c1="\e[1;33m" # Bold Yellow
c2="\e[1;36m" # Bold Blue
c3="\e[1;37m" # Bold White
c4="\e[1;32m" # Bold Green
c5="\e[1;31m" # Bold Red
bold="\e[1m"
underline="\e[4m"
c0="\e[0m"

# MPD server settings

if [ -z "$MPD_HOST" ]; then HOST="localhost"; else HOST="$MPD_HOST"; fi
if [ -z "$MPD_PORT" ]; then PORT="6600"; else PORT="$MPD_PORT"; fi
MPD_TCP="/dev/tcp/$HOST/$PORT"


# Common Functions

function mpd_sndcommand() {
        # $1 command
        exec 5<> $MPD_TCP 2>/dev/null
        [[ $? -gt 0 ]] && return 1
        echo $1 >&5
        echo "close" >&5
        tmp=$(cat <&5)
        exec 5>&-
        _ret=$(head -n -1 <<< "$tmp" | tail -n +2)
        return 0
}

function extract_field() {
        # $1 field_name
        # $2 search body
        _ret=$(grep "^$1: " <<< "$2" 2>/dev/null | sed "s/$1: //")
}

function mpd_getinfo() {
	if [[ `pgrep mpd` ]]; then
		mpd_sndcommand currentsong
		[[ $? -gt 0 ]] && return 1
		_tmp=$_ret
		mpdTitle=$(grep "^Title: " <<< "$_tmp" 2>/dev/null | sed "s/Title: //")
		mpdArtist=$(grep "^Artist: " <<< "$_tmp" 2>/dev/null | sed "s/Artist: //")
		mpdAlbum=$(grep "^Album: " <<< "$_tmp" 2>/dev/null | sed "s/Album: //")
		_songtime=$(grep "^Time: " <<< "$_tmp" 2>/dev/null | sed "s/Time: //" | cut -f 1 -d :)
		(( _mm=$_songtime / 60 ))
		[[ ${#_mm} -eq 1 ]] && _mm="0$_mm"
		(( _ss=$_songtime - $_mm * 60 ))
		[[ ${#_ss} -eq 1 ]] && _ss="0$_ss"
		mpdLength="$_mm:$_ss"
		mpdDate=$(grep "^Date: " <<< "$_tmp" 2>/dev/null | sed "s/Date: //")
		mpdGenre=$(grep "^Genre: " <<< "$_tmp" 2>/dev/null | sed "s/Genre: //")
		mpd_sndcommand "status"
		_tmp=$_ret
		mpdSongID=$(grep "^song: " <<< "$_tmp" 2>/dev/null | sed "s/song: //")
		mpdPlaylistL=$(grep "^playlistlength: " <<< "$_tmp" 2>/dev/null | sed "s/playlistlength: //")
		_nowtime=$(grep "^time: " <<< "$_tmp" 2>/dev/null | sed "s/time: //" | awk -F":" '{print $1}')
		(( _mm=$_nowtime / 60 ))
		[[ ${#_mm} -eq 1 ]] && _mm="0$_mm"
		(( _ss=$_nowtime - $_mm * 60 ))
		[[ ${#_ss} -eq 1 ]] && _ss="0$_ss"
		mpdNowTime="$_mm:$_ss"
		mpdBitrate=$(grep "^bitrate: " <<< "$_tmp" 2>/dev/null | sed "s/bitrate: //")
	else
	        echo -e "\e[1;31mERROR! \e[0m\e[1mNo currently playing song. (MPD stopped?)\e[0m"
		exit
	fi
}

function displayHelp() {
	echo -e "${c1}bmpc${c0} : The BASH MPD Client\e[0m"
	echo -e "\t${c2}help${c0}\t Display this help message."
        echo -e "\t${c2}next${c0}\t\t Jump to next song on playlist."
        echo -e "\t${c2}prev${c0}\t\t Jump to previous song on playlist."
        echo -e "\t${c2}current${c0}\t\t Shows information on currently laying song."
        echo -e "\t${c2}rm SONGID${c0}\t Removes song with SONGID from playlist."
        echo -e "\t${c2}rm current${c0}\t Removes currently playing song from playlist."
        echo -e "\t${c2}rawquery${c0}\t Returns output of raw TCP commands to the MPD server."
        echo -e "\t${c2}set${c0}\t\t Displays various server settings."
        echo -e "\t${c2}set random${c0}\t Toggles random playback."
        echo -e "\t${c2}set repeat${c0}\t Toggles repeat playback."
	echo -ne "\n"
	echo -e "\t${c2}-h|--help${c0}\t Display this help message."
	echo -e "\t${c2}--host HOST${c0}\t Specify MPD_HOST."
	echo -e "\t${c2}--nocolor${c0}\t Specify bmpc to use no colors."
}

# Code

case "$1" in
	'-h'|'--help')
		displayHelp
		exit
	;;
	'--host')
		MPD_HOST="$2"
		shift 2
	;;
	'--nocolor')
		c1=${c0}
		c2=${c0}
		c3=${c0}
		c4=${c0}
		c5=${c0}
		shift
	;;
esac

case "$1" in
	'help')
		displayHelp
		exit
	;;
	'next')
		mpd_sndcommand next
		mpd_getinfo
		echo -e " ${c4}>>>  ${c2}(${c0} ${mpdSongID:-N/A} ${bold}/${c0} ${mpdPlaylistL:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdTitle:-N/A} ${bold}-${c0} ${mpdArtist:-N/A} ${bold}-${c0} ${mpdAlbum:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdLength:-N/A} ${c2})${c0}"
	;;
	'prev')
		mpd_sndcommand previous
		mpd_getinfo
		echo -e " ${c5}<<<  ${c2}(${c0} ${mpdSongID:-N/A} ${bold}/${c0} ${mpdPlaylistL:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdTitle:-N/A} ${bold}-${c0} ${mpdArtist:-N/A} ${bold}-${c0} ${mpdAlbum:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdLength:-N/A} ${c2})${c0}"
	;;
	'current')
		mpd_getinfo
		echo -e " ${c1}NP:  ${c2}(${c0} ${mpdSongID:-N/A} ${bold}/${c0} ${mpdPlaylistL:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdTitle:-N/A} ${bold}-${c0} ${mpdArtist:-N/A} ${bold}-${c0} ${mpdAlbum:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdGenre:-N/A}${bold} -${c0} ${mpdDate:-N/A} ${c2})${c0} ${c2}(${c0} ${mpdNowTime:-N/A} / ${mpdLength:-N/A}${bold} at${c0} ${mpdBitrate:-N/A} kbps ${c2})${c0}"
	;;
	'rm')
		if [ ! "$2" ]; then echo -e " ${c5} ERROR!${c0}  You must supply 'rm' with a songid or current."
		else
			if [ "$2" == "current" ]; then
				mpd_getinfo
				mpd_sndcommand next
				mpd_sndcommand "delete ${mpdSongID}"
			elif [ `echo "$2" | grep "^[0-9]*$" 2>/dev/null` ]; then
				mpd_sndcommand "delete ${2}"
			else
				echo -e " ${c5} ERROR!${c0}  You must supply 'rm' with a songid or current."
			fi
		fi
	;;
	'set')
		case "$2" in
			'random')
				mpd_sndcommand status random
				mpd_randomstate=$(echo "$_ret" | grep "random:" 2>/dev/null | sed 's/random: //')
				if [ "$mpd_randomstate" == "0" ]; then
					mpd_sndcommand 'random 1'
					echo -e " ${c2}>>${c1} Settings${c0}\tRandom status now set to${c2} on${c0}."
				elif [ "$mpd_randomstate" == "1" ]; then
					mpd_sndcommand 'random 0'
					echo -e " ${c2}>>${c1} Settings${c0}\tRandom status now set to${c2} off${c0}."
				fi
			;;
			'repeat')
				mpd_sndcommand status repeat
				mpd_repeatstate=$(echo "$_ret" | grep "repeat:" 2>/dev/null | sed 's/repeat: //')
				if [ "$mpd_repeatstate" == "0" ]; then
					mpd_sndcommand 'repeat 1'
					echo -e " ${c2}>>${c1} Settings${c0}\tRepeat status now set to${c2} on${c0}."
				elif [ "$mpd_repeatstate" == "1" ]; then
					mpd_sndcommand 'repeat 0'
					echo -e " ${c2}>>${c1} Settings${c0}\tRepeat status now set to${c2} off${c0}."
				fi
			;;
		esac
		if [ -z "$2" ]; then
			mpd_sndcommand status
			mpd_randomstate=$(echo "$_ret" | grep "random:" 2>/dev/null | sed -e 's/random: //' -e 's/0/off/' -e 's/1/on/')
			mpd_repeatstate=$(echo "$_ret" | grep "repeat:" 2>/dev/null | sed -e 's/repeat: //' -e 's/0/off/' -e 's/1/on/')
			mpd_xfadestate=$(echo "$_ret" | grep "xfade:" 2>/dev/null | sed -e 's/xfade: //' -e 's/0/off/' -e 's/1/on/')
			echo -e " ${c2}>>${c1} Settings${c0}\t${c2}Random:${c0} ${mpd_randomstate} ${bold}-${c0} ${c2}Repeat:${c0} ${mpd_repeatstate} ${bold}-${c0} ${c2}Crossfade:${c0} ${mpd_xfadestate}${c0}"
		fi
	;;
	'rawquery')
		while [ -n "$2" ]; do
			_opts="$_opts $2"
			shift
			if [ $? -ne 0 ]; then
				break
			fi
		done
		# echo $_opts
		mpd_sndcommand "$_opts"
		echo "$_ret"
	;;
	*)
		echo -e " ${c5}ERROR!${c0}\tThat is not a valid command. Please see bmpc --help or bmpc help for"
		echo -e "\ta list of available commands."
		exit 1
	;;
esac

exit 0
